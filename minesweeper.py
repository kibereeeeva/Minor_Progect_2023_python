import tkinter as tk          
from random import shuffle     
from tkinter.messagebox import showinfo, showerror    

colors = {                      
    0: 'white',
    1: 'blue',           
    2: '#008200',
    3: '#FF0000',
    4: '#000084',
    5: '#840000',
    6: '#008284',
    7: '#840084',
    8: '#000000',
}


class MyButton(tk.Button): 
    """–ö–ª–∞—Å—Å MyButton –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –∏–∑ –æ–±—ã—á–Ω–æ–π —Ç–∫–∏–Ω—Ç–µ—Ä–æ–≤—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏, 
    –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞, –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–º–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç?)"""

    def __init__(self, master, x:int, y:int, number=0, *args, **kwargs): 
        """–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ MyButton. Master - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç(–æ–∫–Ω–æ tkinter) –≥–¥–µ –≤–µ—Å–µ–ª–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, 
        *args –∏ **kwargs –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏, 
        –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. 
        –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ 
        –∫–ª–∞—Å—Å–∞ MyButton –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –¥–∞–ª—å—à–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
        super(MyButton, self).__init__(master, width=3, font='Calibri 15 bold', *args, **kwargs) 
        #–ø–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.x = x
        self.y = y
        self.number = number      
        self.is_mine = False       
        self.count_bomb = 0
        self.is_open = False

    def __repr__(self):       
        """–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–≤–æ–¥ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª–∏"""
        return f'MyButton {self.x}{self.y}{self.number}{self.is_mine}'  # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ —Å –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏


class MineSweeper:   
    """–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –Ω–∞—à–µ–π –∏–≥—Ä—ã (—Ç—É—Ç –≤—Å—è –ª–æ–≥–∏–∫–∞) —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏/–¥–∞–Ω–Ω—ã–º–∏
         –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ/–º–µ—Ç–æ–¥—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"""
    window = tk.Tk()     
    ROW = 7
    COLUMNS = 10         
    MINES = 20
    IS_GAME_OVER = False    
    IS_FIRST_CLICK = True

    def __init__(self):    
        """–º–µ—Ç–æ–¥ __init__ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã, —Ç.–µ. —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∏"""
        self.buttons = []   #–∫–Ω–æ–ø–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ –∫–∞–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è —á–µ—Ä–µ–∑  self.
        for i in range(MineSweeper.ROW +2):
            temp = []                                   
            for j in range(MineSweeper.COLUMNS + 2):
                btn = MyButton(MineSweeper.window, x=i, y=j)
                btn.config(command=lambda button=btn: self.click(button)) #—á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞–∂–∞—Ç–∏–µ, —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ config –ø–µ—Ä–µ–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∞ —á–µ—Ä–µ–∑ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫–∏—é-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –ø—Ä–∏–º–∏–Ω–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –≤—ã–∑—ã–≤–∞–µ–º click
                btn.bind("<Button-2>", self.right_click) #–°–≤—è–∑–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ self.right_click) —Å —Å–æ–±—ã—Ç–∏–µ–º (—â–µ–ª—á–æ–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏). 
                #"<Button-2>" - —ç—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —â–µ–ª—á–æ–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏. "self.right_click" - —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç–æ–¥ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                temp.append(btn)
            self.buttons.append(temp)

    def right_click(self, event):
        if MineSweeper.IS_GAME_OVER:
            return
        cur_btn = event.widget
        if cur_btn['state'] == 'normal':
            cur_btn['state'] = 'disabled'
            cur_btn['text'] = '‚ùÑÔ∏è'
        elif cur_btn['text'] == '‚ùÑÔ∏è':
            cur_btn['text'] = ''
            cur_btn['state'] = 'normal'


    def click(self, clicked_button: MyButton):  
        """–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: –≤—ã–≤–æ–¥ –º–∏–Ω—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã, 
        –ø—Ä–∏—á–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –º–µ—Ç–æ–¥ –≤ MineSweeper, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å –∏ –æ —Å–≤–æ–∏—Ö —Å–æ—Å–µ–¥—è—Ö"""
                                                 
        if MineSweeper.IS_GAME_OVER:
            return

        if MineSweeper.IS_FIRST_CLICK:
            self.insert_mines(clicked_button.number)
            self.count_mines_in_buttons()
            self.print_buttons()
            MineSweeper.IS_FIRST_CLICK = False

        if clicked_button.is_mine:              
            clicked_button.config(text='üéÑ', background='red', disabledforeground='black')
            clicked_button.is_open = True
            MineSweeper.IS_GAME_OVER = True
            showinfo('Game over','–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –° –ù–æ–≤—ã–º –ì–æ–¥–æ–º! ')
            for i in range(1, MineSweeper.ROW + 1):
                for j in range(1, MineSweeper.COLUMNS + 1):
                    btn = self.buttons[i][j]
                    if btn.is_mine:
                        btn['text'] = 'üéÑ'
        else:                                                            
            color = colors.get(clicked_button.count_bomb, 'black')
            if clicked_button.count_bomb:
                clicked_button.config(text=clicked_button.count_bomb, disabledforeground=color)
                clicked_button.is_open = True
            else:
                self.breadth_first_search(clicked_button) #–¥–∞–ª–µ–µ —Å–æ–∑–¥–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
        clicked_button.config(state='disabled')            
        clicked_button.config(relief=tk.SUNKEN)

    def breadth_first_search(self, btn: MyButton): 
        """–ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, 
        —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ö–æ–¥ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫. –î–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Å–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, 
        —á—Ç–æ –æ–Ω–∞ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è. –ï—Å–ª–∏ —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, 
        —Ç–æ —Å–æ—Å–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å queue –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Ö–æ–¥–∞."""

        queue = [btn]
        while queue:

            cur_btn = queue.pop()
            color = colors.get(cur_btn.count_bomb, 'black')
            if cur_btn.count_bomb:
                cur_btn.config(text=cur_btn.count_bomb, disabledforeground=color)
            else:
                cur_btn.config(text='', disabledforeground=color)
            cur_btn.is_open = True
            cur_btn.config(state='disabled')
            cur_btn.config(relief=tk.SUNKEN)

            if cur_btn.count_bomb == 0:
                 x, y = cur_btn.x, cur_btn.y       
                 for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        if not abs(dx - dy) == 1:
                            continue

                        next_btn = self.buttons[x+dx][y+dy]
                        if not next_btn.is_open and 1<=next_btn.x<=MineSweeper.ROW and \
                                1 <= next_btn.y <= MineSweeper.COLUMNS and next_btn not in queue:   
                            queue.append(next_btn)

    def reload(self):
        """–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã: –º–µ—Ç–æ–¥–æ–º destroy() —á–µ—Ä–µ–∑ –æ–±—Ö–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ window.winfo_children
      –∏ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã —á–µ—Ä–µ–∑ create_widgets"""
        [child.destroy() for child in self.window.winfo_children()]
        self.__init__()
        self.create_widgets()
        MineSweeper.IS_FIRST_CLICK = True
        MineSweeper.IS_GAME_OVER = False


    def create_settings_win(self):
        """–°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, 
        –ø–æ–ª—å–∑—É–µ–º—Å—è –º–µ—Ç–æ–¥–æ–º grid –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ–∫–Ω–µ"""
        win_settings = tk.Toplevel(self.window)
        win_settings.wm_title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫').grid(row=0, column=0)
        row_entry = tk.Entry(win_settings)
        row_entry.insert(0, MineSweeper.ROW)
        row_entry.grid(row=0, column=1, padx=20, pady=20)
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫').grid(row=1, column=0)
        column_entry = tk.Entry(win_settings)
        column_entry.insert(0, MineSweeper.COLUMNS)
        column_entry.grid(row=1, column=1, padx=20, pady=20)
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω').grid(row=2, column=0)
        mines_entry = tk.Entry(win_settings)
        mines_entry.insert(0, MineSweeper.MINES)
        mines_entry.grid(row=2, column=1, padx=20, pady=20)
        save_btn = tk.Button(win_settings, text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å',
                             command=lambda :self.change_settings(row_entry, column_entry,mines_entry))
        save_btn.grid(row=3, column=0, columnspan=2)

    def change_settings(self, row: tk.Entry, column: tk.Entry, mines: tk.Entry):
        """–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ–Ω—é"""
        try:
            int(row.get()), int(column.get()), int(mines.get())
        except ValueError:
            showerror('–û—à–∏–±–∫–∞', '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
            return
        MineSweeper.ROW = int(row.get())
        MineSweeper.COLUMNS = int(column.get())
        MineSweeper.MINES = int(mines.get())
        self.reload()

    def create_widgets(self):
        """—Å–æ–∑–¥–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ –º–µ–Ω—é —Å –ª–µ–π–±–ª–∞–º–∏, –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ –æ–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ"""

        menubar = tk.Menu(self.window)
        self.window.config(menu=menubar)

        setting_menu = tk.Menu(menubar, tearoff=0)
        setting_menu.add_command(label='–ò–≥—Ä–∞—Ç—å', command=self.reload) #—Å–±—Ä–æ—Å –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ç–æ–¥–æ–º .reload
        setting_menu.add_command(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', command=self.create_settings_win) #–¥–æ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ —Å —á–∏—Å–ª–æ–º –∫–æ–ª–æ–Ω–æ–∫, —Å—Ç—Ä–æ–∫ –∏ –º–∏–Ω
        setting_menu.add_command(label='–í—ã—Ö–æ–¥', command=self.window.destroy)
        menubar.add_cascade(label='–§–∞–π–ª', menu=setting_menu)

        count = 1                                  
        for i in range(1, MineSweeper.ROW + 1):      
            for j in range(1, MineSweeper.COLUMNS + 1):    #—É—á–ª–∏ –±–∞—Ä—å–µ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å 1
                btn = self.buttons[i][j]
                btn.number = count                         
                btn.grid(row=i, column=j, stick='NWES')
                count += 1

        for i in range(1, MineSweeper.ROW + 1):
            tk.Grid.rowconfigure(self.window, i, weight=1)    

        for i in range(1, MineSweeper.COLUMNS + 1):
            tk.Grid.columnconfigure(self.window, i, weight=1)

    def open_all_buttons(self):
        """—Å–æ–∑–¥–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –±–∞—Ä—å–µ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        for i in range(MineSweeper.ROW + 2):
            for j in range(MineSweeper.COLUMNS + 2):
                btn =  self.buttons[i][j]
                if btn.is_mine:
                    btn.config(text='*', background='red', disabledforeground='black') #—Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                # elif btn.count_bomb == 1:
                #    btn.config(text=btn.count_bomb, fg='blue')
                # elif btn.count_bomb == 2:
                #    btn.config(text=btn.count_bomb, fg='green')
                elif btn.count_bomb in colors:                        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∫–ª—é—á–∞
                    color = colors.get(btn.count_bomb, 'black')      #–∫–Ω–æ–ø–∫–∞ - –Ω–µ –±–æ–º–±–∞, –ø–æ–ª—É—á–∞–µ–º –µ–µ —Ü–≤–µ—Ç —á–µ—Ä–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
                    btn.config(text=btn.count_bomb, fg=color)

    def start(self):
        """–∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–¥ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        self.create_widgets()     #–∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –Ω–∞–º –º–µ—Ç–æ–¥—ã (–∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–∫—Ä—ã—Ç–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞ –∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, —Å–æ—Å—Ç–æ—è—â–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞)
        #self.open_all_buttons()
        MineSweeper.window.mainloop() #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫–Ω–∞

    def print_buttons(self):
        """–≤—ã–≤–æ–¥–∏–º —É—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–º–±—ã –∏–∑ count_mines_in_buttons"""
        for i in range(1, MineSweeper.ROW + 1):           #—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –±–æ–º–±–∞ - "–í" –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–Ω–æ–ø–∫–∏
            for j in range(1, MineSweeper.COLUMNS + 1):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    print('B', end='')               
                else:
                    print(btn.count_bomb, end='')
            print()                                    #–ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω-–º–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

    def insert_mines(self, number:int):
        """—Ä–∞—Å–ø–æ–ª–∞–µ–º –±–æ–º–±—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ —Å –ø–æ–º–æ—â—å—é —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–º–µ—é—â–∏—Ö—Å—è –º–∏–Ω"""
        index_mines = self.get_mines_places(number)      # —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–∏–Ω
        print(index_mines)                                #—Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏—Å—Ç–≤–∞–µ–º–≤–∞–µ—Ç—Å—è –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º, –∫—Ä–æ–º–µ –±–∞—Ä—å–µ—Ä–Ω—ã—Ö
        count = 1
        for i in range(1, MineSweeper.ROW + 1):             #–ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä—è–¥–∞–º –∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ –Ω–∏–º
            for j in range(1, MineSweeper.COLUMNS + 1):      #—Å–ø—Ä–∞—à–∏–≤–∞–µ–º - –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–∫–µ index_mines,–µ—Å–ª–∏ - –¥–∞,  –∏–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ is_mine –Ω–∞ True
                btn = self.buttons[i][j]
                if btn.number in index_mines:
                    btn.is_mine = True

    def count_mines_in_buttons(self):
        """–∑–¥–µ—Å—å —É—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π –Ω–∞—à–∏—Ö –±–æ–º–± """
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):  #–ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–≤—ã–º –∫–Ω–æ–ø–∫–∞–º 
                btn = self.buttons[i][j]                 #–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–æ–º–±–µ
                count_bomb = 0                           
                if not btn.is_mine:                       #–æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å–µ–¥—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
                    for row_dx in [-1, 0, 1]:
                        for col_dx in [-1, 0, 1]:
                            neighbour = self.buttons[i + row_dx][j + col_dx]
                            if neighbour.is_mine:
                                count_bomb += 1          #—Å –ø–æ–º–æ—â—å—é –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –∫–Ω–æ–ø–∫–∏-–Ω–µ-–±–æ–º–±—ã –∏ –µ—Å–ª–∏ —ç—Ç–æ—Ç —Å–æ—Å–µ–¥ - –º–∏–Ω–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                btn.count_bomb = count_bomb              #—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω—Ç—Ä–∏–±—É—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–∞–≤–ª—è–µ–º —á–∏—Å–ª–µ —Å —Å—á–µ—Ç—á–∏–∫–∞

    @staticmethod                                  #—Ç—É—Ç –º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏, —Ç–µ —Å–∞–º–∏ –º–∏–Ω—ã –Ω–µ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç, self –Ω–µ –Ω—É–∂–µ–Ω, –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—á–Ω—ã–º
    def get_mines_places(exclude_number:int):
        """–ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏–º–µ—é—â–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
        indexes = list(range(1, MineSweeper.COLUMNS * MineSweeper.ROW + 1)) #—Ñ–æ—Ä–º—Ä—É–µ–º —á–∏—Å–ª–∞ –æ—Ç 1 –¥ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫
        print(f'–ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–º–µ—Ä {exclude_number}')
        indexes.remove(exclude_number)
        shuffle(indexes)                      #–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –Ω–∞—à–∏ –∏–Ω–¥–µ–∫—Å—ã
        return indexes[:MineSweeper.MINES]     #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω


game = MineSweeper()   #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è game —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç MineSweeper() –∏ —Ç—É—Ç —Å–æ–∑–¥–∞–¥—É—Ç—Å—è –∫–Ω–æ–ø–∫–∏
game.start()           #—Å—Ç—Ä–æ—á–∫–∏ –Ω–∏–∂–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
